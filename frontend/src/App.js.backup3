import React, { useState, useEffect } from 'react';
import { ShoppingBag, Heart, User, Search, Filter, Star, MapPin, Clock, Plus, Bell, ShoppingCart, TrendingUp, Users, Package, Award, LogIn, UserPlus, Mail, Lock, Eye, EyeOff, Upload, DollarSign, AlertCircle } from 'lucide-react';

const ThriftHub = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [searchQuery, setSearchQuery] = useState('');
  const [favorites, setFavorites] = useState(new Set());
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [cart, setCart] = useState([]);
  const [orders, setOrders] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [cartLoading, setCartLoading] = useState(false);

  // Backend API URL - Update this to match your backend
  const API_URL = 'http://localhost:5001/api'; // Change this to your backend URL

  // API helper function with better error handling
  const apiCall = async (endpoint, options = {}) => {
    const token = localStorage.getItem('token');
    const headers = {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` }),
      ...options.headers,
    };

    // Handle FormData (for file uploads)
    if (options.body instanceof FormData) {
      delete headers['Content-Type'];
    }

    try {
      console.log(`API Call: ${options.method || 'GET'} ${API_URL}${endpoint}`);
      const response = await fetch(`${API_URL}${endpoint}`, {
        ...options,
        headers,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('API call failed:', error);
      throw error;
    }
  };

  // Load initial data
  useEffect(() => {
    const token = localStorage.getItem('token');
    const savedUser = localStorage.getItem('user');
    
    if (token && savedUser) {
      try {
        const userData = JSON.parse(savedUser);
        setUser(userData);
        setIsAuthenticated(true);
        loadUserData();
      } catch (error) {
        console.error('Error parsing saved user data:', error);
        localStorage.removeItem('token');
        localStorage.removeItem('user');
      }
    }
    
    loadProducts();
  }, []);

  const loadUserData = async () => {
    try {
      await Promise.all([
        loadCart(),
        loadOrders(),
        loadFavorites()
      ]);
    } catch (error) {
      console.error('Failed to load user data:', error);
    }
  };

  const loadProducts = async () => {
    try {
      const data = await apiCall('/products');
      console.log('Loaded products:', data);
      setProducts(data.products || data || []);
    } catch (error) {
      console.error('Failed to load products:', error);
      // Fallback to demo data if backend is not available
      setProducts(featuredItems);
    }
  };

  const loadCart = async () => {
    try {
      const data = await apiCall('/cart');
      setCart(data.items || data.cart || []);
    } catch (error) {
      console.error('Failed to load cart:', error);
    }
  };

  const loadOrders = async () => {
    try {
      const data = await apiCall('/orders');
      setOrders(data.orders || data || []);
    } catch (error) {
      console.error('Failed to load orders:', error);
    }
  };

  const loadFavorites = async () => {
    try {
      const data = await apiCall('/favorites');
      const favoriteIds = (data.favorites || data || []).map(fav => fav.productId || fav._id || fav.id);
      setFavorites(new Set(favoriteIds));
    } catch (error) {
      console.error('Failed to load favorites:', error);
    }
  };

  // Auth functions
  const handleLogin = async (email, password) => {
    try {
      setLoading(true);
      const data = await apiCall('/auth/login', {
        method: 'POST',
        body: JSON.stringify({ email, password }),
      });

      localStorage.setItem('token', data.token);
      localStorage.setItem('user', JSON.stringify(data.user));
      setUser(data.user);
      setIsAuthenticated(true);
      setCurrentPage('home');
      
      // Load user-specific data
      await loadUserData();
      
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const handleRegister = async (userData) => {
    try {
      setLoading(true);
      const data = await apiCall('/auth/register', {
        method: 'POST',
        body: JSON.stringify(userData),
      });

      localStorage.setItem('token', data.token);
      localStorage.setItem('user', JSON.stringify(data.user));
      setUser(data.user);
      setIsAuthenticated(true);
      setCurrentPage('home');
      
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await apiCall('/auth/logout', { method: 'POST' });
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      setIsAuthenticated(false);
      setUser(null);
      setCurrentPage('home');
      setCart([]);
      setFavorites(new Set());
      setOrders([]);
    }
  };

  // Cart functions with backend integration
  const addToCart = async (item) => {
    if (!isAuthenticated) {
      setCurrentPage('login');
      return;
    }

    try {
      setCartLoading(true);
      await apiCall('/cart/add', {
        method: 'POST',
        body: JSON.stringify({ 
          productId: item.id || item._id, 
          quantity: 1 
        }),
      });

      // Update local cart state
      setCart(prev => {
        const existing = prev.find(cartItem => (cartItem.id || cartItem._id) === (item.id || item._id));
        if (existing) {
          return prev.map(cartItem => 
            (cartItem.id || cartItem._id) === (item.id || item._id)
              ? { ...cartItem, quantity: cartItem.quantity + 1 }
              : cartItem
          );
        }
        return [...prev, { ...item, quantity: 1 }];
      });

    } catch (error) {
      console.error('Failed to add to cart:', error);
      alert('Failed to add item to cart. Please try again.');
    } finally {
      setCartLoading(false);
    }
  };

  const removeFromCart = async (itemId) => {
    try {
      await apiCall(`/cart/${itemId}`, { method: 'DELETE' });
      setCart(prev => prev.filter(item => (item.id || item._id) !== itemId));
    } catch (error) {
      console.error('Failed to remove from cart:', error);
      // Fallback to local removal
      setCart(prev => prev.filter(item => (item.id || item._id) !== itemId));
    }
  };

  const updateCartQuantity = async (itemId, newQuantity) => {
    if (newQuantity === 0) {
      removeFromCart(itemId);
      return;
    }

    try {
      await apiCall(`/cart/${itemId}`, {
        method: 'PUT',
        body: JSON.stringify({ quantity: newQuantity }),
      });

      setCart(prev => prev.map(item => 
        (item.id || item._id) === itemId 
          ? { ...item, quantity: newQuantity }
          : item
      ));
    } catch (error) {
      console.error('Failed to update cart quantity:', error);
      // Fallback to local update
      setCart(prev => prev.map(item => 
        (item.id || item._id) === itemId 
          ? { ...item, quantity: newQuantity }
          : item
      ));
    }
  };

  const toggleFavorite = async (itemId) => {
    if (!isAuthenticated) {
      setCurrentPage('login');
      return;
    }

    try {
      const isFavorited = favorites.has(itemId);
      if (isFavorited) {
        await apiCall(`/favorites/${itemId}`, { method: 'DELETE' });
      } else {
        await apiCall('/favorites', {
          method: 'POST',
          body: JSON.stringify({ productId: itemId }),
        });
      }

      const newFavorites = new Set(favorites);
      if (newFavorites.has(itemId)) {
        newFavorites.delete(itemId);
      } else {
        newFavorites.add(itemId);
      }
      setFavorites(newFavorites);
    } catch (error) {
      console.error('Failed to toggle favorite:', error);
      // Fallback to local favorites
      const newFavorites = new Set(favorites);
      if (newFavorites.has(itemId)) {
        newFavorites.delete(itemId);
      } else {
        newFavorites.add(itemId);
      }
      setFavorites(newFavorites);
    }
  };

  // Check if user is seller
  const isSeller = () => {
    return isAuthenticated && user?.role === 'seller';
  };

  // Demo data (fallback)
  const featuredItems = [
    { id: 1, name: "Vintage Denim Jacket", price: 35, originalPrice: 89, image: "ðŸ§¥", category: "Jackets", condition: "Excellent", seller: "VintageVibes", rating: 4.8, discount: 61 },
    { id: 2, name: "Floral Summer Dress", price: 28, originalPrice: 75, image: "ðŸ‘—", category: "Dresses", condition: "Good", seller: "EcoFashion", rating: 4.6, discount: 63 },
    { id: 3, name: "Classic Leather Boots", price: 45, originalPrice: 120, image: "ðŸ‘¢", category: "Shoes", condition: "Very Good", seller: "RetroStyle", rating: 4.9, discount: 63 },
    { id: 4, name: "Silk Scarf", price: 15, originalPrice: 45, image: "ðŸ§£", category: "Accessories", condition: "Excellent", seller: "LuxeSecond", rating: 4.7, discount: 67 },
    { id: 5, name: "Wool Sweater", price: 32, originalPrice: 85, image: "ðŸ§¶", category: "Tops", condition: "Good", seller: "CozyFinds", rating: 4.5, discount: 62 },
    { id: 6, name: "Designer Handbag", price: 89, originalPrice: 250, image: "ðŸ‘œ", category: "Accessories", condition: "Excellent", seller: "LuxeSecond", rating: 4.9, discount: 64 },
  ];

  const categories = [
    { name: "Clothing", icon: "ðŸ‘”", count: 1234, subcategories: ["Tops", "Bottoms", "Dresses", "Outerwear"] },
    { name: "Shoes", icon: "ðŸ‘ ", count: 567, subcategories: ["Sneakers", "Boots", "Heels", "Flats"] },
    { name: "Accessories", icon: "ðŸ‘œ", count: 890, subcategories: ["Bags", "Jewelry", "Scarves", "Belts"] },
    { name: "Vintage", icon: "âœ¨", count: 345, subcategories: ["1970s", "1980s", "1990s", "2000s"] },
  ];

  const stats = [
    { icon: Users, number: "50K+", label: "Happy Customers", color: "from-blue-500 to-purple-600" },
    { icon: Package, number: "100K+", label: "Items Sold", color: "from-green-500 to-teal-600" },
    { icon: Award, number: "4.9", label: "Customer Rating", color: "from-yellow-500 to-orange-600" },
    { icon: TrendingUp, number: "95%", label: "Satisfaction Rate", color: "from-pink-500 to-rose-600" },
  ];

  // Sell Item Page Component - ONLY FOR SELLERS
  const SellItemPage = () => {
    const [formData, setFormData] = useState({
      name: '',
      description: '',
      price: '',
      originalPrice: '',
      category: '',
      condition: '',
      size: '',
      brand: '',
      images: []
    });
    const [imageFiles, setImageFiles] = useState([]);
    const [submitLoading, setSubmitLoading] = useState(false);
    const [success, setSuccess] = useState(false);
    const [errors, setErrors] = useState({});

    const conditions = ['Excellent', 'Very Good', 'Good', 'Fair'];
    const categoryOptions = ['Clothing', 'Shoes', 'Accessories', 'Vintage'];

    // Check if user is authenticated and is a seller
    if (!isAuthenticated) {
      return (
        <div className="min-h-screen bg-slate-50 flex items-center justify-center p-6">
          <div className="bg-white rounded-3xl p-12 shadow-lg text-center max-w-md">
            <LogIn className="w-16 h-16 text-indigo-600 mx-auto mb-6" />
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Login Required</h2>
            <p className="text-gray-600 mb-8">You need to be logged in to sell items on Thrift Hub.</p>
            <button 
              onClick={() => setCurrentPage('login')}
              className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-4 rounded-xl font-semibold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300"
            >
              Sign In
            </button>
          </div>
        </div>
      );
    }

    if (!isSeller()) {
      return (
        <div className="min-h-screen bg-slate-50 flex items-center justify-center p-6">
          <div className="bg-white rounded-3xl p-12 shadow-lg text-center max-w-md">
            <AlertCircle className="w-16 h-16 text-orange-500 mx-auto mb-6" />
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Seller Account Required</h2>
            <p className="text-gray-600 mb-8">Only users with seller accounts can list items for sale. Please create a seller account to access this feature.</p>
            <div className="space-y-4">
              <button 
                onClick={handleLogout}
                className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-4 rounded-xl font-semibold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300"
              >
                Create Seller Account
              </button>
              <button 
                onClick={() => setCurrentPage('home')}
                className="w-full bg-white border border-gray-300 text-gray-700 px-8 py-4 rounded-xl font-semibold hover:bg-gray-50 transition-all duration-300"
              >
                Back to Home
              </button>
            </div>
          </div>
        </div>
      );
    }

    const handleInputChange = (e) => {
      const { name, value } = e.target;
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
      // Clear error for this field
      if (errors[name]) {
        setErrors(prev => ({
          ...prev,
          [name]: ''
        }));
      }
    };

    const handleImageUpload = (e) => {
      const files = Array.from(e.target.files);
      if (files.length > 5) {
        alert('Maximum 5 images allowed');
        return;
      }
      
      setImageFiles(files);
      
      // Create preview URLs
      const imageUrls = files.map(file => URL.createObjectURL(file));
      setFormData(prev => ({
        ...prev,
        images: imageUrls
      }));
    };

    const validateForm = () => {
      const newErrors = {};
      
      if (!formData.name.trim()) newErrors.name = 'Product name is required';
      if (!formData.description.trim()) newErrors.description = 'Description is required';
      if (!formData.price || formData.price <= 0) newErrors.price = 'Valid price is required';
      if (!formData.category) newErrors.category = 'Category is required';
      if (!formData.condition) newErrors.condition = 'Condition is required';
      // Removed the image requirement since backend doesn't need it
      
      return newErrors;
    };

    const handleSubmit = async (e) => {
      e.preventDefault();
      
      const newErrors = validateForm();
      if (Object.keys(newErrors).length > 0) {
        setErrors(newErrors);
        return;
      }

      setSubmitLoading(true);
      setErrors({});

      try {
        // Send JSON data (not FormData)
        const submitData = {
          name: formData.name,
          description: formData.description,
          price: Number(formData.price),
          originalPrice: Number(formData.originalPrice) || Number(formData.price) * 1.5,
          category: formData.category,
          condition: formData.condition,
          size: formData.size,
          brand: formData.brand,
          image: formData.images.length > 0 ? formData.images[0] : "ðŸ‘•"
        };
        console.log('Sending product data:', submitData);

        const response = await apiCall('/products', {
          method: 'POST',
          body: JSON.stringify(submitData),
        });

        console.log('Product created successfully:', response);
        setSuccess(true);
        
        // Clear the form
        setFormData({
          name: '',
          description: '',
          price: '',
          originalPrice: '',
          category: '',
          condition: '',
          size: '',
          brand: '',
          images: []
        });
        setImageFiles([]);
        
        setTimeout(() => {
          setSuccess(false);
          setCurrentPage('explore'); // Go to explore to see the new product
          loadProducts(); // Refresh products list
        }, 2000);

      } catch (error) {
        console.error('Failed to create product:', error);
        setErrors({ submit: error.message || 'Failed to create product. Please try again.' });
      } finally {
        setSubmitLoading(false);
      }
    };

    if (success) {
      return (
        <div className="min-h-screen bg-slate-50 flex items-center justify-center p-6">
          <div className="bg-white rounded-3xl p-12 shadow-lg text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <Package className="w-8 h-8 text-green-600" />
            </div>
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Item Listed Successfully!</h2>
            <p className="text-gray-600 mb-6">Your item has been added to the marketplace and is now available for purchase.</p>
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500 mx-auto"></div>
          </div>
        </div>
      );
    }

    return (
      <div className="min-h-screen bg-slate-50 p-6">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
            <h1 className="text-4xl font-bold mb-2">Sell Your Item</h1>
            <p className="text-gray-600">List your pre-loved fashion items and earn money while helping the planet!</p>
          </div>

          <form onSubmit={handleSubmit} className="bg-white rounded-3xl p-8 shadow-lg space-y-6">
            {errors.submit && (
              <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
                {errors.submit}
              </div>
            )}

            {/* Images Upload */}
            <div>
              <label className="block text-lg font-semibold text-gray-700 mb-4">
                Product Images *
              </label>
              <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-indigo-400 transition-colors">
                <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <input
                  type="file"
                  multiple
                  accept="image/*"
                  onChange={handleImageUpload}
                  className="hidden"
                  id="images"
                />
                <label htmlFor="images" className="cursor-pointer">
                  <span className="text-lg font-medium text-indigo-600 hover:text-indigo-700">Upload photos</span>
                  <p className="text-gray-500 mt-2">PNG, JPG up to 10MB each (Max 5 images)</p>
                </label>
              </div>
              {errors.images && <p className="text-red-500 text-sm mt-2">{errors.images}</p>}
              {formData.images.length > 0 && (
                <div className="grid grid-cols-5 gap-4 mt-4">
                  {formData.images.map((image, index) => (
                    <img key={index} src={image} alt={`Preview ${index}`} className="w-full h-24 object-cover rounded-lg" />
                  ))}
                </div>
              )}
            </div>

            {/* Basic Information */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Item Name *</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent ${errors.name ? 'border-red-300' : 'border-gray-200'}`}
                  placeholder="e.g., Vintage Denim Jacket"
                />
                {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Brand</label>
                <input
                  type="text"
                  name="brand"
                  value={formData.brand}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder="e.g., Levi's, H&M, Zara"
                />
              </div>
            </div>

            {/* Category and Condition */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Category *</label>
                <select
                  name="category"
                  value={formData.category}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent ${errors.category ? 'border-red-300' : 'border-gray-200'}`}
                >
                  <option value="">Select Category</option>
                  {categoryOptions.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
                {errors.category && <p className="text-red-500 text-sm mt-1">{errors.category}</p>}
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Condition *</label>
                <select
                  name="condition"
                  value={formData.condition}
                  onChange={handleInputChange}
                  className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent ${errors.condition ? 'border-red-300' : 'border-gray-200'}`}
                >
                  <option value="">Select Condition</option>
                  {conditions.map(condition => (
                    <option key={condition} value={condition}>{condition}</option>
                  ))}
                </select>
                {errors.condition && <p className="text-red-500 text-sm mt-1">{errors.condition}</p>}
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Size</label>
                <input
                  type="text"
                  name="size"
                  value={formData.size}
                  onChange={handleInputChange}
                  className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder="e.g., M, 32, 8.5"
                />
              </div>
            </div>

            {/* Pricing */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Selling Price *</label>
                <div className="relative">
                  <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="number"
                    name="price"
                    value={formData.price}
                    onChange={handleInputChange}
                    className={`w-full pl-10 pr-4 py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent ${errors.price ? 'border-red-300' : 'border-gray-200'}`}
                    placeholder="0.00"
                    min="0"
                    step="0.01"
                  />
                </div>
                {errors.price && <p className="text-red-500 text-sm mt-1">{errors.price}</p>}
              </div>

              <div>
                <label className="block text-sm font-semibold text-gray-700 mb-2">Original Price (Optional)</label>
                <div className="relative">
                  <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="number"
                    name="originalPrice"
                    value={formData.originalPrice}
                    onChange={handleInputChange}
                    className="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                    placeholder="0.00"
                    min="0"
                    step="0.01"
                  />
                </div>
              </div>
            </div>

            {/* Description */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">Description *</label>
              <textarea
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                rows={4}
                className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none ${errors.description ? 'border-red-300' : 'border-gray-200'}`}
                placeholder="Describe your item's condition, style, and any special features..."
              />
              {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={submitLoading}
              className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-4 rounded-xl font-semibold text-lg hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 disabled:opacity-50 disabled:transform-none"
            >
              {submitLoading ? 'Listing Item...' : 'List Item for Sale'}
            </button>
          </form>
        </div>
      </div>
    );
  };

  // Updated HomePage with proper sell button logic
  const HomePage = () => (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-gradient-to-r from-yellow-400 to-red-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" style={{animationDelay: '2s'}}></div>
      </div>

      <div className="relative z-10 space-y-16">
        <section className="pt-20 pb-32 px-4">
          <div className="max-w-7xl mx-auto text-center">
            <div className="inline-flex items-center gap-2 bg-white/80 backdrop-blur-sm rounded-full px-6 py-3 mb-8 shadow-lg">
              <span className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
              <span className="text-sm font-semibold text-slate-700">New arrivals every day</span>
            </div><h1 className="text-6xl md:text-7xl font-black text-slate-900 mb-6 leading-tight">
             Sustainable
             <span className="block bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
               Fashion Marketplace
             </span>
           </h1>
           
           <p className="text-xl text-slate-600 mb-12 max-w-3xl mx-auto">
             Discover unique pre-loved treasures and give fashion a second life. Shop consciously, live sustainably.
           </p>

           <div className="flex flex-col sm:flex-row gap-4 justify-center mb-16">
             <button 
               onClick={() => setCurrentPage('explore')}
               className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-8 py-4 rounded-2xl font-bold text-lg shadow-xl hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300"
             >
               Start Shopping
             </button>
             <button 
               onClick={() => {
                 if (!isAuthenticated) {
                   setCurrentPage('login');
                 } else if (isSeller()) {
                   setCurrentPage('sell');
                 } else {
                   setCurrentPage('register'); // Redirect to create seller account
                 }
               }}
               className="bg-white/80 backdrop-blur-sm text-slate-700 px-8 py-4 rounded-2xl font-bold text-lg border border-white/20 hover:bg-white shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300"
             >
               {!isAuthenticated ? 'Sell Your Items' : isSeller() ? 'Sell Your Items' : 'Become a Seller'}
             </button>
           </div>

           <div className="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto">
             {stats.map((stat, index) => (
               <div key={index} className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-lg hover:shadow-xl transform hover:-translate-y-2 transition-all duration-300">
                 <div className={`w-12 h-12 bg-gradient-to-r ${stat.color} rounded-xl flex items-center justify-center mb-4`}>
                   <stat.icon className="w-6 h-6 text-white" />
                 </div>
                 <div className="text-2xl font-black text-slate-900 mb-1">{stat.number}</div>
                 <div className="text-sm text-slate-600 font-semibold">{stat.label}</div>
               </div>
             ))}
           </div>
         </div>
       </section>

       {/* Search Section */}
       <section className="px-4 pb-16">
         <div className="max-w-4xl mx-auto">
           <div className="relative bg-white/90 backdrop-blur-sm rounded-3xl p-2 shadow-2xl border border-white/20">
             <div className="flex items-center gap-4">
               <div className="flex items-center flex-1 gap-4 px-6 py-4">
                 <Search className="w-6 h-6 text-slate-400" />
                 <input
                   type="text"
                   placeholder="Search for vintage dresses, designer bags, sneakers..."
                   value={searchQuery}
                   onChange={(e) => setSearchQuery(e.target.value)}
                   className="flex-1 text-lg bg-transparent placeholder-slate-400 text-slate-900 outline-none"
                 />
               </div>
               <button className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-4 rounded-2xl hover:shadow-lg transform hover:scale-105 transition-all duration-300">
                 <Filter className="w-6 h-6" />
               </button>
             </div>
           </div>
         </div>
       </section>

       {/* Categories */}
       <section className="px-4 pb-20">
         <div className="max-w-7xl mx-auto">
           <div className="text-center mb-16">
             <h2 className="text-4xl md:text-5xl font-black text-slate-900 mb-4">Shop by Category</h2>
             <p className="text-xl text-slate-600">Find exactly what you're looking for</p>
           </div>

           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
             {categories.map((category, index) => (
               <div key={index} className="group cursor-pointer">
                 <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 shadow-lg hover:shadow-2xl transform hover:-translate-y-4 transition-all duration-500">
                   <div className="text-6xl mb-6 group-hover:scale-110 group-hover:rotate-12 transition-all duration-300">
                     {category.icon}
                   </div>
                   <h3 className="text-2xl font-black text-slate-900 mb-2">{category.name}</h3>
                   <p className="text-slate-600 font-semibold mb-4">{category.count} items</p>
                   <div className="space-y-2">
                     {category.subcategories.map((sub, subIndex) => (
                       <div key={subIndex} className="text-sm text-slate-500 font-medium">â€¢ {sub}</div>
                     ))}
                   </div>
                 </div>
               </div>
             ))}
           </div>
         </div>
       </section>

       {/* Featured Items */}
       <section className="px-4 pb-20">
         <div className="max-w-7xl mx-auto">
           <div className="flex justify-between items-center mb-16">
             <div>
               <h2 className="text-4xl md:text-5xl font-black text-slate-900 mb-4">Featured Items</h2>
               <p className="text-xl text-slate-600">Handpicked treasures just for you</p>
             </div>
             <button 
               onClick={() => setCurrentPage('explore')}
               className="hidden md:flex items-center gap-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-6 py-3 rounded-2xl font-bold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300"
             >
               View All
             </button>
           </div>

           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
             {(products.length > 0 ? products : featuredItems).slice(0, 6).map((item) => (
               <div key={item.id || item._id} className="group cursor-pointer">
                 <div className="relative bg-white/90 backdrop-blur-sm rounded-3xl shadow-lg hover:shadow-2xl transform hover:-translate-y-4 transition-all duration-500 overflow-hidden">
                   <div className="absolute top-4 left-4 z-20 bg-gradient-to-r from-red-500 to-pink-600 text-white px-3 py-1 rounded-full text-sm font-bold">
                     -{item.discount || Math.floor((1 - item.price / (item.originalPrice || item.price * 2)) * 100)}%
                   </div>
                   
                   <button 
                     onClick={() => toggleFavorite(item.id || item._id)}
                     className="absolute top-4 right-4 z-20 bg-white/80 backdrop-blur-sm p-2 rounded-full shadow-lg hover:bg-white transition-all duration-300"
                   >
                     <Heart className={`w-5 h-5 ${favorites.has(item.id || item._id) ? 'fill-red-500 text-red-500' : 'text-slate-400'}`} />
                   </button>

                   <div className="aspect-square bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center text-8xl group-hover:scale-110 transition-transform duration-500">
                     {item.image || (item.images && item.images[0]) || "ðŸ“¦"}
                   </div>

                   <div className="p-6">
                     <div className="flex items-center gap-2 mb-2">
                       <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                       <span className="text-sm font-semibold text-slate-600">{item.rating || "4.5"}</span>
                       <span className="text-slate-300">â€¢</span>
                       <span className="text-sm text-slate-500">{item.condition}</span>
                     </div>
                     
                     <h3 className="text-xl font-bold text-slate-900 mb-2">{item.name}</h3>
                     <p className="text-sm text-slate-500 mb-4">by {item.seller || item.sellerName || "ThriftHub"}</p>
                     
                     <div className="flex items-center justify-between">
                       <div className="flex items-center gap-2">
                         <span className="text-2xl font-black text-slate-900">${item.price}</span>
                         {item.originalPrice && (
                           <span className="text-lg text-slate-400 line-through">${item.originalPrice}</span>
                         )}
                       </div>
                       <button 
                         onClick={() => addToCart(item)}
                         disabled={cartLoading}
                         className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-4 py-2 rounded-xl font-bold hover:shadow-lg transform hover:scale-105 transition-all duration-300 disabled:opacity-50"
                       >
                         {cartLoading ? '...' : 'Add to Cart'}
                       </button>
                     </div>
                   </div>
                 </div>
               </div>
             ))}
           </div>
         </div>
       </section>
     </div>
   </div>
 );

 // Authentication Components with proper backend integration
 const LoginPage = () => {
   const [formData, setFormData] = useState({ email: '', password: '' });
   const [showPassword, setShowPassword] = useState(false);
   const [errors, setErrors] = useState({});

   const handleSubmit = async (e) => {
     e.preventDefault();
     setErrors({});
     
     const result = await handleLogin(formData.email, formData.password);
     if (!result.success) {
       setErrors({ submit: result.error });
     }
   };

   const handleDemoLogin = async (type) => {
     const demoCredentials = {
       buyer: { email: 'buyer@demo.com', password: 'demo123' },
       seller: { email: 'seller@demo.com', password: 'demo123' }
     };

     const result = await handleLogin(demoCredentials[type].email, demoCredentials[type].password);
     if (!result.success) {
       setErrors({ submit: result.error });
     }
   };

   return (
     <div className="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
       <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl p-8 w-full max-w-md border border-white/20">
         <div className="text-center mb-8">
           <div className="w-16 h-16 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
             <ShoppingBag className="w-8 h-8 text-white" />
           </div>
           <h1 className="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">Welcome Back</h1>
           <p className="text-gray-600 mt-2">Sign in to your Thrift Hub account</p>
         </div>

         <form onSubmit={handleSubmit} className="space-y-6">
           {errors.submit && (
             <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg text-sm">
               {errors.submit}
             </div>
           )}

           <div>
             <label className="block text-sm font-semibold text-gray-700 mb-2">Email</label>
             <div className="relative">
               <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
               <input
                 type="email"
                 value={formData.email}
                 onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                 className="w-full pl-10 pr-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                 placeholder="Enter your email"
                 required
               />
             </div>
           </div>

           <div>
             <label className="block text-sm font-semibold text-gray-700 mb-2">Password</label>
             <div className="relative">
               <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
               <input
                 type={showPassword ? 'text' : 'password'}
                 value={formData.password}
                 onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
                 className="w-full pl-10 pr-12 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                 placeholder="Enter your password"
                 required
               />
               <button
                 type="button"
                 onClick={() => setShowPassword(!showPassword)}
                 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
               >
                 {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
               </button>
             </div>
           </div>

           <button
             type="submit"
             disabled={loading}
             className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-xl font-semibold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 disabled:opacity-50"
           >
             {loading ? 'Signing In...' : 'Sign In'}
           </button>
         </form>

         <div className="mt-6 p-4 bg-gray-50 rounded-xl">
           <h4 className="text-sm font-semibold text-gray-700 mb-3 text-center">Try Demo Accounts</h4>
           <div className="space-y-2">
             <button
               onClick={() => handleDemoLogin('buyer')}
               disabled={loading}
               className="w-full text-left p-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors disabled:opacity-50"
             >
               <div className="font-medium text-blue-900">Buyer Account</div>
               <div className="text-sm text-blue-600">buyer@demo.com</div>
             </button>
             <button
               onClick={() => handleDemoLogin('seller')}
               disabled={loading}
               className="w-full text-left p-3 bg-green-50 hover:bg-green-100 rounded-lg transition-colors disabled:opacity-50"
             >
               <div className="font-medium text-green-900">Seller Account</div>
               <div className="text-sm text-green-600">seller@demo.com</div>
             </button>
           </div>
         </div>

         <div className="mt-6 text-center">
           <p className="text-gray-600">
             Don't have an account?{' '}
             <button 
               onClick={() => setCurrentPage('register')}
               className="text-indigo-600 hover:text-indigo-700 font-semibold"
             >
               Sign up
             </button>
           </p>
         </div>
       </div>
     </div>
   );
 };

 const RegisterPage = () => {
   const [formData, setFormData] = useState({
     firstName: '',
     lastName: '',
     email: '',
     password: '',
     confirmPassword: '',
     role: 'buyer'
   });
   const [showPassword, setShowPassword] = useState(false);
   const [errors, setErrors] = useState({});

   const handleSubmit = async (e) => {
     e.preventDefault();
     setErrors({});
     
     if (formData.password !== formData.confirmPassword) {
       setErrors({ confirmPassword: 'Passwords do not match' });
       return;
     }
     
     const { confirmPassword, ...userData } = formData;
     const result = await handleRegister(userData);
     if (!result.success) {
       setErrors({ submit: result.error });
     }
   };

   return (
     <div className="min-h-screen bg-gradient-to-br from-indigo-100 via-purple-50 to-pink-100 flex items-center justify-center p-4">
       <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl p-8 w-full max-w-lg border border-white/20">
         <div className="text-center mb-8">
           <div className="w-16 h-16 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4">
             <UserPlus className="w-8 h-8 text-white" />
           </div>
           <h1 className="text-3xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">Join Thrift Hub</h1>
           <p className="text-gray-600 mt-2">Create your sustainable fashion account</p>
         </div>

         <form onSubmit={handleSubmit} className="space-y-6">
           {errors.submit && (
             <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg text-sm">
               {errors.submit}
             </div>
           )}

           <div className="grid grid-cols-2 gap-4">
             <div>
               <label className="block text-sm font-semibold text-gray-700 mb-2">First Name</label>
               <input
                 type="text"
                 value={formData.firstName}
                 onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))}
                 className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                 placeholder="First name"
                 required
               />
             </div>
             <div>
               <label className="block text-sm font-semibold text-gray-700 mb-2">Last Name</label>
               <input
                 type="text"
                 value={formData.lastName}
                 onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
                 className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                 placeholder="Last name"
                 required
               />
             </div>
           </div>

           <div>
             <label className="block text-sm font-semibold text-gray-700 mb-2">Email</label>
             <input
               type="email"
               value={formData.email}
               onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
               className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
               placeholder="Enter your email"
               required
             />
           </div>

           <div>
             <label className="block text-sm font-semibold text-gray-700 mb-2">Account Type</label>
             <select
               value={formData.role}
               onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}
               className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
             >
               <option value="buyer">Buyer - I want to shop</option>
               <option value="seller">Seller - I want to sell items</option>
             </select>
             <p className="text-sm text-gray-500 mt-1">
               {formData.role === 'seller' ? 'You can list items for sale and earn money' : 'You can buy items from other sellers'}
             </p>
           </div>

           <div>
             <label className="block text-sm font-semibold text-gray-700 mb-2">Password</label>
             <div className="relative">
               <input
                 type={showPassword ? 'text' : 'password'}
                 value={formData.password}
                 onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
                 className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                 placeholder="Create password"
                 required
               />
               <button
                 type="button"
                 onClick={() => setShowPassword(!showPassword)}
                 className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
               >
                 {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
               </button>
             </div>
           </div>

           <div>
             <label className="block text-sm font-semibold text-gray-700 mb-2">Confirm Password</label>
             <input
               type="password"
               value={formData.confirmPassword}
               onChange={(e) => setFormData(prev => ({ ...prev, confirmPassword: e.target.value }))}
               className={`w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent ${errors.confirmPassword ? 'border-red-300' : 'border-gray-200'}`}
               placeholder="Confirm password"
               required
             />
             {errors.confirmPassword && <p className="text-red-500 text-sm mt-1">{errors.confirmPassword}</p>}
           </div>

           <button
             type="submit"
             disabled={loading}
             className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-xl font-semibold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 disabled:opacity-50"
           >
             {loading ? 'Creating Account...' : 'Create Account'}
           </button>
         </form>

         <div className="mt-6 text-center">
           <p className="text-gray-600">
             Already have an account?{' '}
             <button 
               onClick={() => setCurrentPage('login')}
               className="text-indigo-600 hover:text-indigo-700 font-semibold"
             >
               Sign in
             </button>
           </p>
         </div>
       </div>
     </div>
   );
 };

 // Other page components with backend integration
 const ExplorePage = () => (
   <div className="min-h-screen bg-slate-50 p-6">
     <div className="max-w-7xl mx-auto">
       <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
         <div className="flex justify-between items-center">
           <h1 className="text-4xl font-bold">Explore All Items</h1>
           <div className="flex gap-4">
             <select className="border border-gray-200 rounded-lg px-4 py-2">
               <option>Sort by: Newest</option>
               <option>Price: Low to High</option>
               <option>Price: High to Low</option>
             </select>
             <button className="flex items-center gap-2 border border-gray-200 rounded-lg px-4 py-2 hover:bg-gray-50">
               <Filter className="w-4 h-4" />
               Filters
             </button>
           </div>
         </div>
       </div>

       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
         {(products.length > 0 ? products : featuredItems).map((item) => (
           <div key={item.id || item._id} className="bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300">
             <div className="aspect-square bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center text-6xl">
               {item.image || (item.images && item.images[0]) || "ðŸ“¦"}
             </div>
             <div className="p-4">
               <h3 className="font-bold text-lg mb-2">{item.name}</h3>
               <div className="flex items-center gap-2 mb-2">
                 <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                 <span className="text-sm">{item.rating || "4.5"}</span>
                 <span className="text-gray-300">â€¢</span>
                 <span className="text-sm text-gray-600">{item.condition}</span>
               </div>
               <p className="text-sm text-gray-500 mb-3">by {item.seller || item.sellerName || "ThriftHub"}</p>
               <div className="flex justify-between items-center">
                 <p className="text-xl font-bold text-indigo-600">${item.price}</p>
                 <div className="flex gap-2">
                   <button 
                     onClick={() => toggleFavorite(item.id || item._id)}
                     className="text-gray-400 hover:text-red-500 transition-colors"
                   >
                     <Heart className={`w-5 h-5 ${favorites.has(item.id || item._id) ? 'fill-red-500 text-red-500' : ''}`} />
                   </button>
                   <button 
                     onClick={() => addToCart(item)}
                     disabled={cartLoading}
                     className="bg-indigo-500 text-white px-3 py-1 rounded-lg hover:bg-indigo-600 transition-colors text-sm disabled:opacity-50"
                   >
                     {cartLoading ? '...' : 'Add to Cart'}
                   </button>
                 </div>
               </div>
             </div>
           </div>
         ))}
       </div>
     </div>
   </div>
 );

 const CartPage = () => {
   const getCartTotal = () => {
     return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
   };

   const total = getCartTotal();

   if (cart.length === 0) {
     return (
       <div className="min-h-screen bg-slate-50 p-6">
         <div className="max-w-4xl mx-auto">
           <div className="text-center py-20 bg-white rounded-3xl shadow-lg">
             <ShoppingCart className="w-24 h-24 text-gray-300 mx-auto mb-6" />
             <h2 className="text-2xl font-bold text-gray-500 mb-4">Your cart is empty</h2>
             <p className="text-gray-400 mb-8">Start shopping to add items to your cart!</p>
             <button 
               onClick={() => setCurrentPage('explore')}
               className="bg-indigo-500 text-white px-8 py-4 rounded-xl font-semibold hover:bg-indigo-600 transition-colors"
             >
               Start Shopping
             </button>
           </div>
         </div>
       </div>
     );
   }

   return (
     <div className="min-h-screen bg-slate-50 p-6">
       <div className="max-w-4xl mx-auto">
         <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
           <h1 className="text-4xl font-bold mb-2">Shopping Cart</h1>
           <p className="text-gray-600">{cart.length} item{cart.length !== 1 ? 's' : ''} in your cart</p>
         </div>

         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
           <div className="lg:col-span-2 space-y-4">
             {cart.map((item) => (
               <div key={item.id || item._id} className="bg-white rounded-2xl p-6 shadow-lg">
                 <div className="flex items-center gap-4">
                   <div className="w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-lg flex items-center justify-center text-3xl">
                     {item.image || "ðŸ“¦"}
                   </div>
                   <div className="flex-1">
                     <h3 className="font-bold text-lg">{item.name}</h3>
                     <p className="text-gray-500 text-sm">by {item.seller || item.sellerName}</p>
                     <p className="text-gray-500 text-sm">{item.condition}</p>
                   </div>
                   <div className="flex items-center gap-3">
                     <button 
                       onClick={() => updateCartQuantity(item.id || item._id, item.quantity - 1)}
                       className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center hover:bg-gray-200"
                     >
                       -
                     </button>
                     <span className="w-8 text-center font-semibold">{item.quantity}</span>
                     <button 
                       onClick={() => updateCartQuantity(item.id || item._id, item.quantity + 1)}
                       className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center hover:bg-gray-200"
                     >
                       +
                     </button>
                   </div>
                   <div className="text-right">
                     <p className="text-xl font-bold text-indigo-600">${(item.price * item.quantity).toFixed(2)}</p>
                     <button 
                       onClick={() => removeFromCart(item.id || item._id)}
                       className="text-red-500 hover:text-red-700 text-sm"
                     >
                       Remove
                     </button>
                   </div>
                 </div>
               </div>
             ))}
           </div>

           <div className="bg-white rounded-2xl p-6 shadow-lg h-fit">
             <h3 className="text-xl font-bold mb-4">Order Summary</h3>
             <div className="space-y-3 mb-6">
               <div className="flex justify-between">
                 <span>Subtotal</span>
                 <span>${total.toFixed(2)}</span>
               </div>
               <div className="flex justify-between">
                 <span>Shipping</span>
                 <span>Free</span>
               </div>
               <div className="border-t pt-3">
                 <div className="flex justify-between font-bold text-lg">
                   <span>Total</span>
                   <span>${total.toFixed(2)}</span>
                 </div>
               </div>
             </div>
             <button 
               onClick={() => setCurrentPage('checkout')}
               className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-xl font-semibold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300"
             >
               Proceed to Checkout
             </button>
           </div>
         </div>
       </div>
     </div>
   );
 };

 const CheckoutPage = () => {
   const [orderPlaced, setOrderPlaced] = useState(false);
   const [checkoutLoading, setCheckoutLoading] = useState(false);

   const handlePlaceOrder = async () => {
     if (!isAuthenticated) {
       setCurrentPage('login');
       return;
     }

     setCheckoutLoading(true);
     
     try {
       const orderData = {
         items: cart.map(item => ({
           productId: item.id || item._id,
           quantity: item.quantity,
           price: item.price,
           name: item.name
         })),
         total: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0),
         shippingAddress: {
           // Add shipping form data here when implemented
         }
       };

       await apiCall('/orders', {
         method: 'POST',
         body: JSON.stringify(orderData),
       });

       // Clear cart after successful order
       await apiCall('/cart/clear', { method: 'DELETE' });
       setCart([]);
       setOrderPlaced(true);
       
       setTimeout(() => {
         setOrderPlaced(false);
         setCurrentPage('orders');
         loadOrders();
       }, 2000);

     } catch (error) {
       console.error('Failed to place order:', error);
       alert('Failed to place order. Please try again.');
     } finally {
       setCheckoutLoading(false);
     }
   };

   if (orderPlaced) {
     return (
       <div className="min-h-screen bg-slate-50 flex items-center justify-center p-6">
         <div className="bg-white rounded-3xl p-12 shadow-lg text-center">
           <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
             <Package className="w-8 h-8 text-green-600" />
           </div>
           <h2 className="text-3xl font-bold text-gray-900 mb-4">Order Placed Successfully!</h2>
           <p className="text-gray-600 mb-6">Thank you for your purchase. We'll send you a confirmation email shortly.</p>
           <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500 mx-auto"></div>
         </div>
       </div>
     );
   }

   return (
     <div className="min-h-screen bg-slate-50 p-6">
       <div className="max-w-4xl mx-auto">
         <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
           <h1 className="text-4xl font-bold">Checkout</h1>
         </div>

         <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
           <div className="space-y-6">
             <div className="bg-white rounded-2xl p-6 shadow-lg">
               <h3 className="text-xl font-bold mb-4">Shipping Information</h3>
               <div className="grid grid-cols-2 gap-4">
                 <input type="text" placeholder="First Name" className="border border-gray-200 rounded-lg px-4 py-3" />
                 <input type="text" placeholder="Last Name" className="border border-gray-200 rounded-lg px-4 py-3" />
               </div>
               <input type="email" placeholder="Email" className="w-full border border-gray-200 rounded-lg px-4 py-3 mt-4" />
               <input type="text" placeholder="Address" className="w-full border border-gray-200 rounded-lg px-4 py-3 mt-4" />
               <div className="grid grid-cols-3 gap-4 mt-4">
                 <input type="text" placeholder="City" className="border border-gray-200 rounded-lg px-4 py-3" />
                 <input type="text" placeholder="State" className="border border-gray-200 rounded-lg px-4 py-3" />
                 <input type="text" placeholder="ZIP" className="border border-gray-200 rounded-lg px-4 py-3" />
               </div>
             </div>

             <div className="bg-white rounded-2xl p-6 shadow-lg">
               <h3 className="text-xl font-bold mb-4">Payment Method</h3>
               <div className="space-y-3">
                 <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50">
                   <input type="radio" name="payment" defaultChecked />
                   <span>Credit Card</span>
                 </label>
                 <label className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg cursor-pointer hover:bg-gray-50">
                   <input type="radio" name="payment" />
                   <span>PayPal</span>
                 </label>
               </div>
             </div>
           </div>

           <div className="bg-white rounded-2xl p-6 shadow-lg h-fit">
             <h3 className="text-xl font-bold mb-4">Order Summary</h3>
             <div className="space-y-3 mb-6">
               {cart.map((item) => (
                 <div key={item.id || item._id} className="flex justify-between">
                   <span>{item.name} x{item.quantity}</span>
                   <span>${(item.price * item.quantity).toFixed(2)}</span>
                 </div>
               ))}
               <div className="border-t pt-3">
                 <div className="flex justify-between font-bold text-lg">
                   <span>Total</span>
                   <span>${cart.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2)}</span>
                 </div>
               </div>
             </div>
             <button 
               onClick={handlePlaceOrder}
               disabled={checkoutLoading}
               className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-3 rounded-xl font-semibold hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 disabled:opacity-50"
             >
               {checkoutLoading ? 'Placing Order...' : 'Place Order'}
             </button>
           </div>
         </div>
       </div>
     </div>
   );
 };

 const OrdersPage = () => (
   <div className="min-h-screen bg-slate-50 p-6">
     <div className="max-w-4xl mx-auto">
       <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
         <h1 className="text-4xl font-bold">My Orders</h1>
         <p className="text-gray-600 mt-2">Track your purchases and order history</p>
       </div>

       <div className="space-y-6">
         {orders.length === 0 ? (
           <div className="text-center py-20 bg-white rounded-3xl shadow-lg">
             <Package className="w-24 h-24 text-gray-300 mx-auto mb-6" />
             <h2 className="text-2xl font-bold text-gray-500 mb-4">No orders yet</h2>
             <p className="text-gray-400 mb-8">Start shopping to see your orders here!</p>
             <button 
               onClick={() => setCurrentPage('explore')}
               className="bg-indigo-500 text-white px-8 py-4 rounded-xl font-semibold hover:bg-indigo-600 transition-colors"
             >
               Start Shopping
             </button>
           </div>
         ) : (
           orders.map((order) => (
             <div key={order.id || order._id} className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
               <div className="flex justify-between items-start mb-4">
                 <div>
                   <h3 className="text-xl font-bold">Order #{order.id || order._id}</h3>
                   <p className="text-gray-500">Placed on {new Date(order.date || order.createdAt).toLocaleDateString()}</p>
                 </div>
                 <div className="text-right">
                   <p className="text-2xl font-bold text-indigo-600">${order.total}</p>
                   <span className={`inline-block px-3 py-1 rounded-full text-sm font-semibold ${
                     order.status === 'Delivered' ? 'bg-green-100 text-green-800' :
                     order.status === 'Shipped' ? 'bg-blue-100 text-blue-800' :
                     'bg-yellow-100 text-yellow-800'
                   }`}>
                     {order.status || 'Processing'}
                   </span>
                 </div>
               </div>
               <div className="border-t pt-4">
                 <p className="text-gray-600 mb-2">Items:</p>
                 <div className="flex flex-wrap gap-2">
                   {(order.items || []).map((item, index) => (
                     <span key={index} className="bg-gray-100 px-3 py-1 rounded-full text-sm">
                       {typeof item === 'string' ? item : item.name || item.productName}
                     </span>
                   ))}
                 </div>
               </div>
             </div>
           ))
         )}
       </div>
     </div>
   </div>
 );

 const FavoritesPage = () => {
   const favoriteItems = (products.length > 0 ? products : featuredItems).filter(item => favorites.has(item.id || item._id));

   return (
     <div className="min-h-screen bg-slate-50 p-6">
       <div className="max-w-7xl mx-auto">
         <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
           <h1 className="text-4xl font-bold">My Favorites</h1>
           <p className="text-gray-600 mt-2">{favoriteItems.length} item{favoriteItems.length !== 1 ? 's' : ''} saved</p>
         </div>
         
         {favoriteItems.length === 0 ? (
           <div className="text-center py-20 bg-white rounded-3xl shadow-lg">
             <Heart className="w-24 h-24 text-gray-300 mx-auto mb-6" />
             <h2 className="text-2xl font-bold text-gray-500 mb-4">No favorites yet</h2>
             <p className="text-gray-400 mb-8">Start exploring and save items you love!</p>
             <button 
               onClick={() => setCurrentPage('explore')}
               className="bg-indigo-500 text-white px-8 py-4 rounded-xl font-semibold hover:bg-indigo-600 transition-colors"
             >
               Start Shopping
             </button>
           </div>
         ) : (
           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
             {favoriteItems.map((item) => (
               <div key={item.id || item._id} className="bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300">
                 <div className="aspect-square bg-gradient-to-br from-gray-100 to-gray-200 flex items-center justify-center text-6xl">
                   {item.image || (item.images && item.images[0]) || "ï¿½ï¿½"}
                 </div>
                 <div className="p-4">
                   <h3 className="font-bold text-lg mb-2">{item.name}</h3>
                   <p className="text-sm text-gray-500 mb-3">{item.condition} â€¢ {item.seller || item.sellerName}</p>
                   <div className="flex justify-between items-center">
                     <p className="text-xl font-bold text-indigo-600">${item.price}</p>
                     <button 
                       onClick={() => addToCart(item)}
                       disabled={cartLoading}
                       className="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600 transition-colors disabled:opacity-50"
                     >
                       {cartLoading ? '...' : 'Add to Cart'}
                     </button>
                   </div>
                 </div>
               </div>
             ))}
           </div>
         )}
       </div>
     </div>
   );
 };

 const ProfilePage = () => (
   <div className="min-h-screen bg-slate-50 p-6">
     <div className="max-w-4xl mx-auto">
       <div className="bg-white rounded-3xl p-8 shadow-lg mb-8">
         <div className="flex items-center gap-6 mb-8">
           <div className="w-24 h-24 bg-indigo-100 rounded-full flex items-center justify-center">
             <User className="w-12 h-12 text-indigo-600" />
           </div>
           <div className="flex-1">
             <h1 className="text-3xl font-bold mb-2">
               {user?.name || `${user?.firstName} ${user?.lastName}` || 'User'}
             </h1>
             <p className="text-gray-600 text-lg">
               {user?.role === 'seller' ? 'Verified Seller' : 'Sustainable Fashion Enthusiast'} â€¢ 
               Member since {user?.memberSince || new Date().getFullYear()}
             </p>
             <div className="flex items-center gap-4 mt-4">
               <div className="flex items-center gap-1">
                 <Star className="w-5 h-5 fill-yellow-400 text-yellow-400" />
                 <span className="font-semibold">4.9</span>
                 <span className="text-gray-500">(127 reviews)</span>
               </div>
               {user?.role === 'seller' && (
                 <span className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-semibold">
                   Seller Account
                 </span>
               )}
             </div>
           </div>
           <button 
             onClick={handleLogout}
             className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors"
           >
             Logout
           </button>
         </div>
         
         <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
           <div className="text-center p-6 bg-indigo-50 rounded-2xl">
             <p className="text-3xl font-bold text-indigo-600 mb-2">{orders.length}</p>
             <p className="text-gray-600">Orders Placed</p>
           </div>
           <div className="text-center p-6 bg-purple-50 rounded-2xl">
             <p className="text-3xl font-bold text-purple-600 mb-2">{favorites.size}</p>
             <p className="text-gray-600">Favorites</p>
           </div>
           <div className="text-center p-6 bg-pink-50 rounded-2xl">
             <p className="text-3xl font-bold text-pink-600 mb-2">${orders.reduce((sum, order) => sum + (order.total || 0), 0).toFixed(2)}</p>
             <p className="text-gray-600">Total Spent</p>
           </div>
         </div>
       </div>

       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
         {[
           { icon: ShoppingBag, title: "My Orders", desc: "Track your purchases and deliveries", action: () => setCurrentPage('orders') },
           { icon: Heart, title: "My Favorites", desc: "View your saved items", action: () => setCurrentPage('favorites') },
           ...(isSeller() ? [
             { icon: Plus, title: "Sell an Item", desc: "List something from your closet", action: () => setCurrentPage('sell') }
           ] : []),
           { icon: Clock, title: "Purchase History", desc: "View all your transactions", action: () => setCurrentPage('orders') },
         ].map(({ icon: Icon, title, desc, action }) => (
           <button 
             key={title}
             onClick={action}
             className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer border border-gray-100 group text-left"
           >
             <div className="flex items-center gap-4">
               <div className="p-3 bg-indigo-100 rounded-xl group-hover:bg-indigo-200 transition-colors">
                 <Icon className="w-6 h-6 text-indigo-600" />
               </div>
               <div className="flex-1">
                 <h3 className="font-bold text-lg text-gray-900">{title}</h3>
                 <p className="text-gray-600">{desc}</p>
               </div>
               <span className="text-gray-400 group-hover:text-gray-600 transition-colors">â†’</span>
             </div>
           </button>
         ))}
       </div>
     </div>
   </div>
 );

 const renderPage = () => {
   if (!isAuthenticated) {
     if (currentPage === 'register') return <RegisterPage />;
     return <LoginPage />;
   }

   switch (currentPage) {
     case 'home': return <HomePage />;
     case 'explore': return <ExplorePage />;
     case 'sell': return <SellItemPage />;
     case 'cart': return <CartPage />;
     case 'checkout': return <CheckoutPage />;
     case 'orders': return <OrdersPage />;
     case 'favorites': return <FavoritesPage />;
     case 'profile': return <ProfilePage />;
     default: return <HomePage />;
   }
 };

 if (!isAuthenticated) {
   return renderPage();
 }

 return (
   <div className="min-h-screen bg-slate-50">
     <nav className="bg-white/90 backdrop-blur-lg shadow-lg border-b border-gray-200 sticky top-0 z-50">
       <div className="max-w-7xl mx-auto px-6">
         <div className="flex items-center justify-between h-16">
           <button 
             onClick={() => setCurrentPage('home')} 
             className="flex items-center gap-3"
           >
             <div className="w-10 h-10 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-xl flex items-center justify-center">
               <ShoppingBag className="w-6 h-6 text-white" />
             </div>
             <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
               Thrift Hub
             </h1>
           </button>

           <div className="hidden md:flex items-center gap-8">
             {[
               { id: 'home', label: 'Home' },
               { id: 'explore', label: 'Explore' },
               ...(isSeller() ? [{ id: 'sell', label: 'Sell', highlight: true }] : []),
               { id: 'favorites', label: 'Favorites', badge: favorites.size },
               { id: 'orders', label: 'Orders' },
               { id: 'profile', label: 'Profile' },
             ].map(({ id, label, badge, highlight }) => (
               <button
                 key={id}
                 onClick={() => setCurrentPage(id)}
                 className={`font-medium transition-colors relative ${
                   currentPage === id 
                     ? 'text-indigo-600' 
                     : highlight 
                       ? 'text-green-600 hover:text-green-700'
                       : 'text-gray-600 hover:text-gray-900'
                 }`}
               >
                 {label}
                 {currentPage === id && (
                   <div className="absolute -bottom-4 left-0 right-0 h-0.5 bg-indigo-600 rounded-full"></div>
                 )}
                 {badge > 0 && (
                   <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                     {badge}
                   </span>
                 )}
               </button>
             ))}
           </div>

           <div className="flex items-center gap-4">
             <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
               <Bell className="w-5 h-5 text-gray-600" />
             </button>
             <button 
               onClick={() => setCurrentPage('cart')}
               className="p-2 hover:bg-gray-100 rounded-lg transition-colors relative"
             >
               <ShoppingCart className="w-5 h-5 text-gray-600" />
               {cart.length > 0 && (
                 <span className="absolute -top-1 -right-1 bg-indigo-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                   {cart.length}
                 </span>
               )}
             </button>
             <button 
               onClick={() => setCurrentPage('profile')}
               className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white px-4 py-2 rounded-lg hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 font-medium"
             >
               {user?.name?.split(' ')[0] || user?.firstName || 'Profile'}
             </button>
           </div>
         </div>
       </div>
     </nav>

     <main>
       {renderPage()}
     </main>

     <footer className="bg-white border-t border-gray-200 mt-16">
       <div className="max-w-7xl mx-auto px-6 py-12">
         <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
           <div>
             <div className="flex items-center gap-3 mb-4">
               <div className="w-8 h-8 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center">
                 <ShoppingBag className="w-4 h-4 text-white" />
               </div>
               <h3 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                 Thrift Hub
               </h3>
             </div>
             <p className="text-gray-600">Sustainable fashion marketplace for conscious consumers.</p>
           </div>
           <div>
             <h4 className="font-semibold mb-4">Shop</h4>
             <div className="space-y-2 text-gray-600">
               <p>Clothing</p>
               <p>Shoes</p>
               <p>Accessories</p>
               <p>Vintage</p>
             </div>
           </div>
           <div>
             <h4 className="font-semibold mb-4">Support</h4>
             <div className="space-y-2 text-gray-600">
               <p>Help Center</p>
               <p>Shipping Info</p>
               <p>Returns</p>
               <p>Contact Us</p>
             </div>
           </div>
           <div>
             <h4 className="font-semibold mb-4">Company</h4>
             <div className="space-y-2 text-gray-600">
               <p>About Us</p>
               <p>Sustainability</p>
               <p>Careers</p>
               <p>Blog</p>
             </div>
           </div>
         </div>
         <div className="border-t border-gray-200 mt-8 pt-8 text-center text-gray-600">
           <p>&copy; 2025 Thrift Hub. All rights reserved.</p>
         </div>
       </div>
     </footer>
   </div>
 );
};

export default ThriftHub;
